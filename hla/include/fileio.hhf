#if( ! @defined( fileio_hhf ))
?fileio_hhf := true;

#includeOnce( "os.hhf" )
#includeOnce( "hla.hhf" )
#includeOnce( "stdio.hhf" )


/*********************************************************************/
/*                                                                   */
/* 	                                                                 */
/* 	fileio namespace                                                 */
/* 	                                                                 */
/* 	                                                                 */
/*********************************************************************/

namespace fileio; @fast;

#if( @global:os.win32 )


	const
		r	:= $8000_0000;	// Open file for reading.
		w	:= $4000_0000;	// Open file for writing.
		rw	:= r | w;		// Open file for reading and writing.
			
#elseif( @global:os.linux )

	const
			r	:= 0;				// Open file for reading.
			w	:= 1;				// Open file for writing.
			rw	:= 2;				// Open file for reading and writing.
			a	:= 3;				// Open file for append (write)


#endif




	procedure open( FileName: string; Access:dword ); 
		@returns( "EAX" ); 
		
			@external( "STDIO_FOPEN" );


	procedure openNew( FileName: string ); @returns( "EAX" ); 
			@external( "STDIO_FOPENNEW" );

	procedure close( Handle:dword ); 
			@external( "STDIO_FCLOSE" );

	procedure flush( Handle:dword ); 
			@external( "STDIO_FFLUSH" );


	procedure eof( Handle:dword ); @returns( "AL" ); 
			@external( "STDIO_FEOF" );


	procedure write( Handle:dword; var buffer:var; count:uns32 ); 
			@external( "STDIO_FWRITE" );

	procedure read( Handle:dword; var buffer:var; count:uns32 ); 
			@external( "STDIO_FREAD" );

	procedure rewind( Handle:dword ); 
		@external( "STDIO_FREWIND" );

	procedure append( Handle:dword ); 
		@external( "STDIO_FAPPEND" );

	procedure position( Handle:dword ); 
		@returns( "EAX" ); 
		@external( "STDIO_FPOSITION" );

	procedure seek( Handle:dword; offset:dword );
		@returns( "EAX" ); 
		@external( "STDIO_FSEEK" );

	procedure rSeek( Handle:dword; offset:dword ); 
		@returns( "EAX" ); 
		@external( "STDIO_FRSEEK" );

	procedure truncate( Handle:dword ); 
		@returns( "EAX" ); 
		@external( "STDIO_FTRUNCATE" );

	procedure copy( source:string; dest:string; failIfExists:boolean ); 
		@returns( "EAX" ); 
		@external( "STDIO_FCOPY" );

	procedure move( source:string; dest:string ); 
		@returns( "EAX" ); 
		@external( "STDIO_FMOVE" );

	procedure delete( filename:string ); 
		@returns( "EAX" ); 
		@external( "STDIO_FDELETE" );

	procedure mkdir( directory:string ); 
		@returns( "EAX" ); 
		@external( "STDIO_FMKDIR" );

	procedure cd( source:string ); 
		@returns( "EAX" ); 
		@external( "STDIO_FCD" );

	procedure exists( source:string ); 
		@returns( "EAX" ); 
		@external( "STDIO_FEXISTS" );

	procedure gwd( dest:string ); 
		@external( "STDIO_FGWD" );

	procedure _sizeh_( handle:dword );
		@returns( "EAX" );
		@external( "STDIO_FSIZEHANDLE" );

	procedure _sizen_( filename:string );
		@returns( "EAX" );
		@external( "STDIO_FSIZENAME" );

	#macro size( parameter );

		#if( @typename( parameter ) = "string" )
		
			fileio._sizen_( parameter );

		#elseif( @typename( parameter ) = "dword" )

			fileio._sizeh_( parameter );

		#elseif( @size( parameter ) = 4 )

			#print
			( 
				"Warning: assuming '",
				@string:parameter,
				"' parameter is a handle" 
			);
			fileio._sizeh_( parameter );

		#else

			#error( "Illegal parameter type (expected dword or string)" );

		#endif

	#endmacro



	/*
	** File output routines:
	*/

	procedure putc( Handle:dword; c:char ); 
			@external( "STDIO_FPUTC" );

	procedure putcSize
	( 
		Handle:dword; 
		c:char; 
		width:int32; 
		fill:char 
	);	
			@external( "STDIO_FPUTCSIZE" );


	procedure newln( Handle:dword ); 
			@external( "STDIO_FNEWLN" );


	procedure putbool( Handle:dword; b:boolean ); 	
			@external( "STDIO_FPUTBOOL" );

	procedure putcset( Handle:dword; cs:cset   ); 	
			@external( "STDIO_FPUTCSET" );


	procedure puts( Handle:dword; s:string  ); 
			@external( "STDIO_FPUTS" );

	procedure putsSize
	( 
		Handle:dword; 
		s:string; 
		width:int32; 
		fill:char 
	);	
			@external( "STDIO_FPUTSSIZE" );


	procedure putb( Handle:dword; h:byte 	 ); 
			@external( "STDIO_FPUTB" );

	procedure putw( Handle:dword; w:word	 ); 
			@external( "STDIO_FPUTW" );

	procedure putd( Handle:dword; dw:dword ); 
			@external( "STDIO_FPUTD" );

	procedure putq( Handle:dword; qw:qword ); 
			@external( "STDIO_FPUTQ" );

	procedure puttb( Handle:dword; tb:tbyte ); 
			@external( "STDIO_FPUTTB" );

	procedure putl( Handle:dword; l:lword ); 
			@external( "STDIO_FPUTL" );



	procedure putbSize( Handle:dword; b:byte; width:dword; fill:char ); 
			@external( "STDIO_FPUTBSIZE" );

	procedure putwSize( Handle:dword; w:word; width:dword; fill:char ); 
			@external( "STDIO_FPUTWSIZE" );

	procedure putdSize( Handle:dword; d:dword; width:dword; fill:char ); 
			@external( "STDIO_FPUTDSIZE" );

	procedure putqSize( Handle:dword; q:qword; width:dword; fill:char ); 
			@external( "STDIO_FPUTQSIZE" );

	procedure putlSize( Handle:dword; l:lword; width:dword; fill:char ); 
			@external( "STDIO_FPUTLSIZE" );




	procedure puti8Size ( Handle:dword; b:byte;  width:int32; fill:char ); 
			@external( "STDIO_FPUTI8SIZE" );

	procedure puti16Size( Handle:dword; w:word;  width:int32; fill:char ); 
			@external( "STDIO_FPUTI16SIZE" );

	procedure puti32Size( Handle:dword; d:dword; width:int32; fill:char ); 
			@external( "STDIO_FPUTI32SIZE" );

	procedure puti64Size( Handle:dword; q:qword; width:int32; fill:char ); 
			@external( "STDIO_FPUTI64SIZE" );

	procedure puti128Size( Handle:dword; l:lword; width:int32; fill:char ); 
			@external( "STDIO_FPUTI128SIZE" );


	
	procedure puti8 ( Handle:dword; b:byte  ); 
			@external( "STDIO_FPUTI8" );

	procedure puti16( Handle:dword; w:word  ); 
			@external( "STDIO_FPUTI16" );

	procedure puti32( Handle:dword; d:dword ); 
			@external( "STDIO_FPUTI32" );

	procedure puti64( Handle:dword; q:qword ); 
			@external( "STDIO_FPUTI64" );

	procedure puti128( Handle:dword; l:lword ); 
			@external( "STDIO_FPUTI128" );



	procedure putu8Size( Handle:dword; b:byte; width:int32;   fill:char ); 
			@external( "STDIO_FPUTU8SIZE" );
	
	procedure putu16Size( Handle:dword; w:word; width:int32;  fill:char ); 
			@external( "STDIO_FPUTU16SIZE" );

	procedure putu32Size( Handle:dword; d:dword; width:int32; fill:char ); 
			@external( "STDIO_FPUTU32SIZE" );

	procedure putu64Size( Handle:dword; q:qword; width:int32; fill:char ); 
			@external( "STDIO_FPUTU64SIZE" );

	procedure putu128Size( Handle:dword; l:lword; width:int32; fill:char ); 
			@external( "STDIO_FPUTU128SIZE" );

	
	
	
	procedure putu8 ( Handle:dword; b:byte  ); 
			@external( "STDIO_FPUTU8" );

	procedure putu16( Handle:dword; w:word  ); 
			@external( "STDIO_FPUTU16" );

	procedure putu32( Handle:dword; d:dword ); 
			@external( "STDIO_FPUTU32" );

	procedure putu64( Handle:dword; q:qword ); 
			@external( "STDIO_FPUTU64" );

	procedure putu128( Handle:dword; l:lword ); 
			@external( "STDIO_FPUTU128" );



	procedure putr80( Handle:dword; r:real80; width:uns32; decpts:uns32 ); 
			@external( "STDIO_FPUTR80" );


	procedure putr64( Handle:dword; r:real64; width:uns32; decpts:uns32 );
			@external( "STDIO_FPUTR64" );


	procedure putr32( Handle:dword; r:real32; width:uns32; decpts:uns32 ); 
			@external( "STDIO_FPUTR32" );


	procedure pute80( Handle:dword; r:real80; width:uns32 ); 
			@external( "STDIO_FPUTE80" );

	procedure pute64( Handle:dword; r:real64; width:uns32 ); 
			@external( "STDIO_FPUTE64" );

	procedure pute32( Handle:dword; r:real32; width:uns32 ); 
			@external( "STDIO_FPUTE32" );


	procedure putr80pad
	(
		Handle:dword; 
		r:real80; 
		width:uns32; 
		decpts:uns32; 
		pad:char 
	); 
			@external( "STDIO_FPUTR80PAD" );


	procedure putr64pad
	( 
		Handle:dword; 
		r:real64; 
		width:uns32; 
		decpts:uns32; 
		pad:char 
	); 
			@external( "STDIO_FPUTR64PAD" );


	procedure putr32pad
	( 
		Handle:dword; 
		r:real32; 
		width:uns32; 
		decpts:uns32; 
		pad:char 
	); 
			@external( "STDIO_FPUTR32PAD" );





	procedure readLn( Handle:dword ); 
			@external( "STDIO_FREADLN" );

	procedure eoln( Handle:dword ); @returns( "al" ); 
			@external( "STDIO_FEOLN" );


	procedure getc( Handle:dword ); @returns( "AL" ); 
			@external( "STDIO_FGETC" );

	procedure gets( Handle:dword; s:string ); 
			@external( "STDIO_FGETS" );

	procedure a_gets( Handle:dword ); 
			@external( "STDIO_A_FGETS" );


	procedure geti8( Handle:dword ); @returns( "al" ); 
			@external( "STDIO_FGETI8" );

	procedure geti16( Handle:dword ); @returns( "ax" ); 
			@external( "STDIO_FGETI16" );

	procedure geti32( Handle:dword ); @returns( "eax" ); 
			@external( "STDIO_FGETI32" );

	procedure geti64( Handle:dword ); @returns( "edx:eax" ); 
			@external( "STDIO_FGETI64" );

	procedure geti128( Handle:dword; var dest:lword ); 
			@external( "STDIO_FGETI128" );


	procedure getu8( Handle:dword ); @returns( "al" ); 
			@external( "STDIO_FGETU8" );

	procedure getu16( Handle:dword ); @returns( "ax" ); 
			@external( "STDIO_FGETU16" );

	procedure getu32( Handle:dword ); @returns( "eax" ); 
			@external( "STDIO_FGETU32" );

	procedure getu64( Handle:dword ); @returns( "edx:eax" ); 
			@external( "STDIO_FGETU64" );

	procedure getu128( Handle:dword; var dest:lword );
			@external( "STDIO_FGETU128" );


	procedure getb( Handle:dword ); @returns( "al" ); 
			@external( "STDIO_FGETB" );

	procedure getw( Handle:dword ); @returns( "ax" ); 
			@external( "STDIO_FGETW" );

	procedure getd( Handle:dword ); @returns( "eax" ); 
			@external( "STDIO_FGETD" );

	procedure getq( Handle:dword ); @returns( "edx:eax" ); 
			@external( "STDIO_FGETQ" );

	procedure getl( Handle:dword; var dest:lword ); 
			@external( "STDIO_FGETL" );


	procedure getf( Handle:dword ); @returns( "st0" ); 
			@external( "STDIO_FGETF" );



	// The following macros provide the same interface to pute32, pute64,
	// and pute80 as the plain (without size/fill char) integer output
	// routines:
		
	
	#macro _pute80( _pute80_h_, _pute80_r_ );
	
		@global:fileio.pute80( _pute80_h_, _pute80_r_, 28 )
		
	#endmacro

	#macro _pute64( _pute64_h_, _pute64_r_ );
	
		@global:fileio.pute64( _pute64_h_, _pute64_r_, 22 )
		
	#endmacro

	#macro _pute32( _pute32_h_, _pute32_r_ );
	
		@global:fileio.pute32( _pute32_h_, _pute32_r_, 15 )
		
	#endmacro


	// The following macros provide the same interface (for the PUT macro)
	// as the integerSize functions:
	
	#macro pute80_( _pute80_h_, _pute80_r_, _pute80_w_, f );
	
		@global:fileio.pute80( _pute80_h_, _pute80_r_, _pute80_w_ )
		
	#endmacro


	#macro pute64_( _pute64_h_, _pute64_r_, _pute64_w_, _pute64_f_ );
	
		@global:fileio.pute64( _pute64_h_, _pute64_r_, _pute64_w_ )
		
	#endmacro


	#macro pute32_( _pute32_h_, _pute32_r_, _pute32_w_, _pute32_f_ );
	
		@global:fileio.pute32( _pute32_h_, _pute32_r_, _pute32_w_ )
		
	#endmacro






const
	validPutType :boolean[ @global:hla.sizePTypes ] :=
		[
			@global:false,		// Undefined
			@global:true,		// tBoolean 	//1
			@global:false,		// enum			//2
			@global:true,		// tUns8,		//3
			@global:true,		// tUns16,		//4
			@global:true,		// tUns32,		//5
			@global:true,		// tUns64,		//6
			@global:true,		// tUns128,		//7
			@global:true,		// tByte,		//8
			@global:true,		// tWord,		//9
			@global:true,		// tDWord,		//10
			@global:true,		// tQWord,		//11
			@global:true,		// tTByte,		//12
			@global:true,		// tLWord,		//13
			@global:true,		// tInt8,		//14
			@global:true,		// tInt16,		//15
			@global:true,		// tInt32,		//16
			@global:true,		// tInt64,		//17
			@global:true,		// tInt128,		//18
			@global:true,		// tChar, 		//19
			@global:false,		// tWChar,		//20
			@global:true,		// tReal32,		//21
			@global:true,		// tReal64, 	//22
			@global:true,		// tReal80,		//23
			@global:false,		// tReal128,	//24
			@global:true,		// tString,		//25
			@global:false,		// tZString,	//26
			@global:false,		// tWString,	//27
			@global:true,		// tCset,		//28
			@global:false,		// tArray,		//29
			@global:false,		// tRecord,		//30
			@global:false,		// tUnion,		//31
			@global:false,		// tClass,		//32
			@global:false,		// tProcptr,	//33
			@global:false,		// tThunk,		//34
			@global:true,		// tPointer		//35
			@global:false,		// tLabel		//36
			@global:false,		// tProc		//37
			@global:false,		// tMethod		//38
			@global:false,		// tClassProc	//39
			@global:false,		// tClassIter	//40
			@global:false,		// tIterator	//41
			@global:false,		// tProgram		//42
			@global:false,		// tMacro		//43
			@global:false,		// tText		//44
			@global:false,		// tRegEx		//45
			@global:false,		// tRegExMac	//46
			@global:false,		// tNamespace	//47
			@global:false,		// tSegment		//48
			@global:false,		// tAnonRec		//49
			@global:false,		// tAnonUnion	//50
			@global:false,		// tVariant		//51
			@global:false		// tError		//52
		];

	validPutSizeType :boolean[ @global:hla.sizePTypes ] :=
		[
			@global:false,		// Undefined
			@global:true,		// tBoolean 	//1
			@global:false,		// enum			//2
			@global:true,		// tUns8,		//3
			@global:true,		// tUns16,		//4
			@global:true,		// tUns32,		//5
			@global:true,		// tUns64,		//6
			@global:true,		// tUns128,		//7
			@global:false,		// tByte,		//8
			@global:false,		// tWord,		//9
			@global:false,		// tDWord,		//10
			@global:false,		// tQWord,		//11
			@global:false,		// tTByte,		//12
			@global:false,		// tLWord,		//13
			@global:true,		// tInt8,		//14
			@global:true,		// tInt16,		//15
			@global:true,		// tInt32,		//16
			@global:true,		// tInt64,		//17
			@global:true,		// tInt128,		//18
			@global:true,		// tChar, 		//19
			@global:false,		// tWChar,		//20
			@global:true,		// tReal32,		//21
			@global:true,		// tReal64, 	//22
			@global:true,		// tReal80,		//23
			@global:false,		// tReal128,	//24
			@global:true,		// tString,		//25
			@global:false,		// tZString,	//26
			@global:false,		// tWString,	//27
			@global:false,		// tCset,		//28
			@global:false,		// tArray,		//29
			@global:false,		// tRecord,		//30
			@global:false,		// tUnion,		//31
			@global:false,		// tClass,		//32
			@global:false,		// tProcptr,	//33
			@global:false,		// tThunk,		//34
			@global:false,		// tPointer		//35
			@global:false,		// tLabel		//36
			@global:false,		// tProc		//37
			@global:false,		// tMethod		//38
			@global:false,		// tClassProc	//39
			@global:false,		// tClassIter	//40
			@global:false,		// tIterator	//41
			@global:false,		// tProgram		//42
			@global:false,		// tMacro		//43
			@global:false,		// tText		//44
			@global:false,		// tRegEx		//45
			@global:false,		// tRegExMac	//46
			@global:false,		// tNamespace	//47
			@global:false,		// tSegment		//48
			@global:false,		// tAnonRec		//49
			@global:false,		// tAnonUnion	//50
			@global:false,		// tVariant		//51
			@global:false		// tError		//52
		];										  




	validPutSize2Type :boolean[ @global:hla.sizePTypes ] :=
		[
			@global:false,		// Undefined
			@global:false,		// tBoolean 	//1
			@global:false,		// enum			//2
			@global:false,		// tUns8,		//3
			@global:false,		// tUns16,		//4
			@global:false,		// tUns32,		//5
			@global:false,		// tUns64,		//6
			@global:false,		// tUns128,		//7
			@global:false,		// tByte,		//8
			@global:false,		// tWord,		//9
			@global:false,		// tDWord,		//10
			@global:false,		// tQWord,		//11
			@global:false,		// tTByte,		//12
			@global:false,		// tLWord,		//13
			@global:false,		// tInt8,		//14
			@global:false,		// tInt16,		//15
			@global:false,		// tInt32,		//16
			@global:false,		// tInt64,		//17
			@global:false,		// tInt128,		//18
			@global:false,		// tChar, 		//19
			@global:false,		// tWChar,		//20
			@global:true,		// tReal32,		//21
			@global:true,		// tReal64, 	//22
			@global:true,		// tReal80,		//23
			@global:false,		// tReal128,	//24
			@global:false,		// tString,		//25
			@global:false,		// tZString,	//26
			@global:false,		// tWString,	//27
			@global:false,		// tCset,		//28
			@global:false,		// tArray,		//29
			@global:false,		// tRecord,		//30
			@global:false,		// tUnion,		//31
			@global:false,		// tClass,		//32
			@global:false,		// tProcptr,	//33
			@global:false,		// tThunk,		//34
			@global:false,		// tPointer		//35
			@global:false,		// tLabel		//36
			@global:false,		// tProc		//37
			@global:false,		// tMethod		//38
			@global:false,		// tClassProc	//39
			@global:false,		// tClassIter	//40
			@global:false,		// tIterator	//41
			@global:false,		// tProgram		//42
			@global:false,		// tMacro		//43
			@global:false,		// tText		//44
			@global:false,		// tRegEx		//45
			@global:false,		// tRegExMac	//46
			@global:false,		// tNamespace	//47
			@global:false,		// tSegment		//48
			@global:false,		// tAnonRec		//49
			@global:false,		// tAnonUnion	//50
			@global:false,		// tVariant		//51
			@global:false		// tError		//52
		];										  



	putFunc :string[ @global:hla.sizePTypes ] :=
		[
			"",				// Undefined
			"putbool",		// tBoolean 	//1
			"",				// enum			//2
			"putu8",		// tUns8,		//3
			"putu16",		// tUns16,		//4
			"putu32",		// tUns32,		//5
			"putu64",		// tUns64,		//6
			"putu128",		// tUns128,		//7
			"putb",			// tByte,		//8
			"putw",			// tWord,		//9
			"putd",			// tDWord,		//10
			"putq",			// tQWord,		//11
			"puttb",		// tLWord,		//12
			"putl",			// tLWord,		//13
			"puti8",		// tInt8,		//14
			"puti16",		// tInt16,		//15
			"puti32",		// tInt32,		//16
			"puti64",		// tInt64,		//17
			"puti128",		// tInt128,		//18
			"putc",			// tChar, 		//19
			"",				// tWChar,		//20
			"_pute32",		// tReal32,		//21
			"_pute64",		// tReal64, 	//22
			"_pute80",		// tReal80,		//23
			"",				// tReal128,	//24
			"puts",			// tString,		//25
			"putzs",		// tZString,	//26
			"",				// tWString,	//27
			"putcset",		// tCset,		//28
			"",				// tArray,		//29
			"",				// tRecord,		//30
			"",				// tUnion,		//31
			"",				// tClass,		//32
			"",				// tProcptr,	//33
			"",				// tThunk,		//34
			"putd",			// tPointer		//35
			"",				// tLabel		//36
			"",				// tProc		//37
			"",				// tMethod		//38
			"",				// tClassProc	//39
			"",				// tClassIter	//40
			"",				// tIterator	//41
			"",				// tProgram		//42
			"",				// tMacro		//43
			"",				// tText		//44
			"",				// tRegEx		//45
			"",				// tRegExMac	//46
			"",				// tNamespace	//47
			"",				// tSegment		//48
			"",				// tAnonRec		//49
			"",				// tAnonUnion	//50
			"",				// tVariant		//51
			""				// tError		//52
		];


	putSizeFunc :string[ @global:hla.sizePTypes ] :=
		[
			"",					// Undefined
			"putboolSize",		// tBoolean 	//1
			"",					// enum			//2
			"putu8Size",		// tUns8,		//3
			"putu16Size",		// tUns16,		//4
			"putu32Size",		// tUns32,		//5
			"putu64Size",		// tUns64,		//6
			"putu128Size",		// tUns128,		//7
			"",					// tByte,		//8
			"",					// tWord,		//9
			"",					// tDWord,		//10
			"",					// tQWord,		//11
			"",					// tLWord,		//12
			"",					// tLWord,		//13
			"puti8Size",		// tInt8,		//14
			"puti16Size",		// tInt16,		//15
			"puti32Size",		// tInt32,		//16
			"puti64Size",		// tInt64,		//17
			"puti128Size",		// tInt128,		//18
			"putcSize",			// tChar, 		//19
			"",					// tWChar,		//20
			"pute32_",			// tReal32,		//21
			"pute64_",			// tReal64, 	//22
			"pute80_",			// tReal80,		//23
			"",					// tReal128,	//24
			"putsSize",			// tString,		//25
			"putzsSize",		// tZString,	//26
			"",					// tWString,	//27
			"",					// tCset,		//28
			"",					// tArray,		//29
			"",					// tRecord,		//30
			"",					// tUnion,		//31
			"",					// tClass,		//32
			"",					// tProcptr,	//33
			"",					// tThunk,		//34
			"",					// tPointer		//35
			"",					// tLabel		//36
			"",					// tProc		//37
			"",					// tMethod		//38
			"",					// tClassProc	//39
			"",					// tClassIter	//40
			"",					// tIterator	//41
			"",					// tProgram		//42
			"",					// tMacro		//43
			"",					// tText		//44
			"",					// tRegEx		//45
			"",					// tRegExMac	//46
			"",					// tNamespace	//47
			"",					// tSegment		//48
			"",					// tAnonRec		//49
			"",					// tAnonUnion	//50
			"",					// tVariant		//51
			""					// tError		//52
		];										  


	putSize2Func :string[ @global:hla.sizePTypes ] :=
		[
			"",					// Undefined
			"",					// tBoolean 	//1
			"",					// enum			//2
			"",					// tUns8,		//3
			"",					// tUns16,		//4
			"",					// tUns32,		//5
			"",					// tUns64,		//6
			"",					// tUns128,		//7
			"",					// tByte,		//8
			"",					// tWord,		//9
			"",					// tDWord,		//10
			"",					// tQWord,		//11
			"",					// tLWord,		//12
			"",					// tLWord,		//13
			"",					// tInt8,		//14
			"",					// tInt16,		//15
			"",					// tInt32,		//16
			"",					// tInt64,		//17
			"",					// tInt128,		//18
			"",					// tChar, 		//19
			"",					// tWChar,		//20
			"putr32",			// tReal32,		//21
			"putr64",			// tReal64, 	//22
			"putr80",			// tReal80,		//23
			"",					// tReal128,	//24
			"",					// tString,		//25
			"",					// tZString,	//26
			"",					// tWString,	//27
			"",					// tCset,		//28
			"",					// tArray,		//29
			"",					// tRecord,		//30
			"",					// tUnion,		//31
			"",					// tClass,		//32
			"",					// tProcptr,	//33
			"",					// tThunk,		//34
			"",					// tPointer		//35
			"",					// tLabel		//36
			"",					// tProc		//37
			"",					// tMethod		//38
			"",					// tClassProc	//39
			"",					// tClassIter	//40
			"",					// tIterator	//41
			"",					// tProgram		//42
			"",					// tMacro		//43
			"",					// tText		//44
			"",					// tRegEx		//45
			"",					// tRegExMac	//46
			"",					// tNamespace	//47
			"",					// tSegment		//48
			"",					// tAnonRec		//49
			"",					// tAnonUnion	//50
			"",					// tVariant		//51
			""					// tError		//52
		];										  



	val
		_fv_ 		:string;
		_curparm_	:string;

	#macro put( _fileVar_, _parameters_[] ); 

		?@global:fileio._fv_ := @string:_fileVar_;
		#for( @global:fileio._curparm_ in _parameters_ )

			@global:hla.put
			( 
				fileio, 
				@global:fileio._fv_, 
				@eval(@global:fileio._curparm_) 
			)

		#endfor

	#endmacro





	/*
	** GET macro for file input.
	*/



	#macro get( _fileVar_, _parms_[] ): 
		_curparm_, _pType_, _arg_, _id_, _tempid_, _saveTrace_;

		?_saveTrace_ := @trace;
		?@trace := false;
		
		?_curparm_:uns32 := 0;
		
		// Save important registers that the "GET" macro uses.

		push( eax );

		// The following loop repeats once for each GET parameter
		// we process.

		#while( _curparm_ < @elements( _parms_ ))

			// If this parameter begins with an identifier,
			// there are some problems to deal with.
			// The symbol table functions (e.g., @ptype) don't
			// allow address expression components after the
			// symbol name.  Named constants, however, do allow
			// such entities.  The following code determines
			// (1) is this a symbol?  (2) if it is a symbol, is
			// it a constant?
			//
			//	For non-constant symbols, we need to strip any
			// trailing non-symbol characters from the string
			// (e.g., "[0]" ).

			?_arg_ := @trim( _parms_[ _curparm_ ], 0 );
			#if( char( _arg_ ) in stdio._idchars_ )

				// If this parameter begins with an id character,
				// then strip away any non-ID symbols from the
				// end of the string.  Then determine if we've
				// got a constant or some other class (e.g.,
				// variable or procedure).  If not a constant,
				// keep only the name.  If a constant, we need
				// to keep all trailing characters as well.

				?_id_ := stdio._GetID_( _arg_ );
				#if
				( 
						@class( @text( _id_ )) = hla.cConstant 
					|	@class( @text( _id_ )) = hla.cValue 
				)

					?_id_ := _arg_;

				#endif

			#else

				// If it's not an ID, we need to keep everything.

				?_id_ := _arg_;

			#endif



			// Determine the type of this parameter so we can
			// call the appropriate routine to input it.

			?_pType_ := @pType( @text( _id_ ));
			?_tempid_ := _id_;
			#while( _pType_ = hla.ptArray )

				?_tempid_ := @typename( @text( _tempid_ ));
				?_pType_ := @pType( @text( _tempid_ ));

			#endwhile

			// Based on the type, call the appropriate library
			// routine to print this value.

			#if( _pType_ = hla.ptBoolean )

				#error( "Boolean input is not supported" );

			#elseif( _pType_ = hla.ptUns8 ) 
				
				fileio.getu8( _fileVar_ );
				#if( _arg_ = "al" )

					mov( al, [esp] );

				#elseif( _arg_ = "ah" )

					mov( al, [esp+1] );

				#else

					mov( al, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptUns16 ) 
				
				fileio.getu16( _fileVar_ );
				#if( _arg_ = "ax" )

					mov( ax, [esp] );

				#else

					mov( ax, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptUns32 ) 
				
				fileio.getu32( _fileVar_ );
				#if( _arg_ = "eax" )

					mov( eax, [esp] );

				#else

					mov( eax, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptUns64 ) 
				
				push( edx );
				fileio.getu64( _fileVar_ );
				mov( eax, @text( "(type dword " + _arg_ + ")" ));
				mov( edx, @text( "(type dword " + _arg_ + "[4])" ));
				pop( edx );

			#elseif( _pType_ = hla.ptUns128 ) 
				
				fileio.getu128( _fileVar_, @text( _arg_ ) );

			#elseif( _pType_ = hla.ptByte ) 
				
				fileio.getb( _fileVar_ );
				#if( _arg_ = "al" )

					mov( al, [esp] );

				#elseif( _arg_ = "ah" )

					mov( al, [esp+1] );

				#else

					mov( al, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptWord ) 
				
				fileio.getw( _fileVar_ );
				#if( _arg_ = "ax" )

					mov( ax, [esp] );

				#else

					mov( ax, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptDWord ) 
				
				fileio.getd( _fileVar_ );
				#if( _arg_ = "eax" )

					mov( eax, [esp] );

				#else

					mov( eax, @text( _arg_ ));

				#endif


			#elseif( _pType_ = hla.ptQWord ) 
				
				push( edx );
				fileio.getq( _fileVar_ );
				mov( eax, @text( "(type dword " + _arg_ + ")" ));
				mov( edx, @text( "(type dword " + _arg_ + "[4])" ));
				pop( edx );
				
			#elseif( _pType_ = hla.ptLWord ) 
				
				fileio.getl( _fileVar_, @text( _arg_ ) );

			#elseif( _pType_ = hla.ptInt8 ) 
				
				fileio.geti8( _fileVar_ );
				#if( _arg_ = "al" )

					mov( al, [esp] );

				#elseif( _arg_ = "ah" )

					mov( al, [esp+1] );

				#else

					mov( al, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptInt16 ) 
				
				fileio.geti16( _fileVar_ );
				#if( _arg_ = "ax" )

					mov( ax, [esp] );

				#else

					mov( ax, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptInt32 ) 
				
				fileio.geti32( _fileVar_ );
				#if( _arg_ = "eax" )

					mov( eax, [esp] );

				#else

					mov( eax, @text( _arg_ ));

				#endif


			#elseif( _pType_ = hla.ptInt64 ) 
				
				push( edx );
				fileio.geti64( _fileVar_ );
				mov( eax, @text( "(type dword " + _arg_ + ")" ));
				mov( edx, @text( "(type dword " + _arg_ + "[4])" ));
				pop( edx );

			#elseif( _pType_ = hla.ptInt128 ) 
				
				fileio.geti128( _fileVar_, @text( _arg_ ) );

			#elseif( _pType_ = hla.ptChar ) 
				
				fileio.getc( _fileVar_ );
				#if( _arg_ = "al" )

					mov( al, [esp] );

				#elseif( _arg_ = "ah" )

					mov( al, [esp+1] );

				#else

					mov( al, @text( _arg_ ));

				#endif

			#elseif( _pType_ = hla.ptCset ) 

				#error( "Cset input is not supported" );

			#elseif
			( 
					_pType_ = hla.ptReal32 
				|	_pType_ = hla.ptReal64 
				|	_pType_ = hla.ptReal80 
			) 
				
				fileio.getf( _fileVar_ );
				fstp( @text( _arg_ ));

			#elseif( _pType_ = hla.ptString ) 

				#if( _arg_ = "eax" )

					fileio.gets(  _fileVar_, [esp] );

				#else

					fileio.gets(  _fileVar_, @text( _arg_ ));

				#endif

			#else

				#error
				( 
					"fileio.get: Unknown data type (" +
					_parms_[ _curparm_ ] +
					":" +
					@typename( @text( _id_ )) +
					")"
				);

			#endif
			?_curparm_ := _curparm_ + 1;

		#endwhile

		// Restore the registers pushed earlier for this call to
		// the GET macro.  Note that this statement does not end
		// with a semicolon.  This is to force the programmer to
		// put a semicolon after the fileio.get(--) invocation.

		pop( eax )

		?@trace := _saveTrace_;
		
	#endmacro



end fileio;

#endif




